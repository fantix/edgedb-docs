.. _ref_eql_statements_insert:

INSERT
======

``INSERT`` allows creating new objects in EdgeDB. Notice that
generally ``id`` is not specified at creation time (although it can
be) and will be automatically generated by EdgeDB.

The data flow of an ``INSERT`` block can be conceptualized like this:

.. eql:statement:: INSERT
    :haswith:

    ``INSERT`` -- create new objects in a database

    .. eql:synopsis::

        [ WITH module_aliases, expression_aliases ]

        INSERT <expr>

Notice that there are no other clauses except ``WITH`` in the
``INSERT`` statement. This is because it is a mutation statement and
not typically used to query the DB. It is still possible to use an
explicit ``SELECT`` statement and treat ``INSERT`` as an expression
the statement operates if filtering, ordering and slicing the results
of a mutation is required.

Here's a simple example of an ``INSERT`` statement creating a new user:

.. code-block:: edgeql

    WITH MODULE example
    INSERT User {
        name := 'Bob Johnson'
    };

``INSERT`` is not only a statement, but also an expression and as such
is has a value of the set of objects that has been created.

.. code-block:: edgeql

    WITH MODULE example
    INSERT Issue {
        number := '100',
        body := 'Fix errors in INSERT',
        owner := (
            SELECT User FILTER User.name = 'Bob Johnson'
        )
    };

It is possible to create nested objects in a single ``INSERT``
statement as an atomic operation.

.. code-block:: edgeql

    WITH MODULE example
    INSERT Issue {
        number := '101',
        body := 'Nested INSERT',
        owner: User {
            name := 'Nested User'
        }
    };

The above statement will create a new ``Issue`` as well as a new
``User`` as the owner of the ``Issue``. It will also return the new
``Issue`` linked to the new ``User`` if the statement is used as an
expression.

It is also possible to create new objects based on some existing data
either provided as an explicit list (possibly automatically generated
by some tool) or a query. A ``FOR`` statement is the basis for this
use-case and ``INSERT`` is simply the expression in the ``UNION``
clause.

.. code-block:: edgeql

    # example of a bulk insert of users based on explicitly provided
    # data
    WITH MODULE example
    FOR x IN {'Alice', 'Bob', 'Carol', 'Dave'}
    UNION (INSERT User {
        name := x
    });

    # example of a bulk insert of issues based on a query
    WITH
        MODULE example,
        Elvis := (SELECT User FILTER .name = 'Elvis'),
        Open := (SELECT Status FILTER .name = 'Open')
    FOR Q IN {(SELECT User FILTER .name ILIKE 'A%')}
    UNION (INSERT Issue {
        name := Q.name + ' access problem',
        body := 'This user was affected by recent system glitch',
        owner := Elvis,
        status := Open
    });

The statement ``FOR <x> IN <set>`` allows to perform bulk inserts. It is
equivalent to invoking ``INSERT`` statement separately once for every
element of the set generated by the provided expression all in a
single transaction. See
:ref:`Usage of FOR statement<ref_eql_forstatement>` for more details.

.. note::

    Statements in EdgeQL represent an atomic interaction with the DB. From
    the point of view of a statement all side-effects (such as DB updates)
    happen after the statement is executed. So as far as each statement is
    concerned, it is some purely functional expression evaluated on some
    specific input (DB state).

.. note::

    Running ``INSERT`` and other DML statements bare in repl yields
    the cardinality of the affected set.
